{"version":3,"sources":["config.js","serviceWorker.js","Live.js","Query.js","index.js"],"names":["module","exports","endpoint","key","databaseId","containerId","Boolean","window","location","hostname","match","CosmosClient","require","config","container","database","currentDate","Date","minusDate","setMinutes","getMinutes","setHours","getHours","jsonDate","toISOString","querySpec","query","Live","state","error","dataset","items","fetchAll","resources","tmp","forEach","item","push","this","setState","console","log","response","datetime","substring","undefined","Table","table-responsive","striped","bordered","hover","variant","class","map","deviceID","getDate","getTime","temperature","toFixed","humidity","productCount","Component","queryA","queryD","queryC","Query","chartA","React","createRef","chartB","chartC","chartD","Math","floor","random","itemsA","itemsD","itemsC","tmpA","tmpB","tmpC","tmpD","itemA","currentData","x","y","color","getRandomInt","dataFormattedA","label","fill","backgroundColor","borderColor","data","itemB","dataTmp","length","newArray","index","i","dataFormattedB","current","itemC","dataFormattedC","itemD","dataFormattedD","canvasA","getContext","Chart","type","datasets","options","responsive","scales","xAxes","distribution","time","unit","stepSize","scaleLabel","display","labelString","yAxes","title","text","fontColor","canvasB","canvasC","canvasD","style","flexFlow","justifyContent","marginBottom","float","boxShadow","padding","border","borderRadius","marginTop","marginRight","position","maxHeight","width","ref","marginLeft","App","className","href","to","path","exact","component","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6412f794.chunk.js","sourcesContent":["const config = {\r\n    endpoint: \"https://databasebencoxford.documents.azure.com:443/\",\r\n    key: \"DTAhh4DedQH2Pnyw5h5qCh2clQ2NPdGT7wntHqFfsVM2PVZK5owuG7ysikb8vYYYKv8AiGZ3DePMer3EQiWOKg==\",\r\n    databaseId: \"outDatabase\",\r\n    containerId: \"MyCollection\",\r\n  };\r\n  \r\n  module.exports = config;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './App.css';\r\nimport Table from 'react-bootstrap/Table'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nconst CosmosClient = require(\"@azure/cosmos\").CosmosClient;\r\nconst config = require(\"./config\");\r\n\r\nconst { endpoint, key, databaseId, containerId } = config;\r\nconst client = new CosmosClient({ endpoint, key });\r\n\r\nconst database = client.database(databaseId);\r\nconst container = database.container(containerId);\r\n\r\nvar currentDate = new Date();\r\nvar minusDate = new Date();\r\nminusDate.setMinutes(minusDate.getMinutes()-5);\r\n\r\ncurrentDate.setHours(currentDate.getHours());\r\nminusDate.setHours(minusDate.getHours());\r\n\r\nvar jsonDate = currentDate.toISOString();\r\nvar jsonMinusDate = minusDate.toISOString();\r\n\r\nvar statement = 'SELECT * FROM c WHERE c.datetime BETWEEN \"' + jsonMinusDate + '\" AND \"' + jsonDate + '\" ORDER BY c.datetime';\r\n\r\nconst querySpec = {\r\n    query: statement\r\n};\r\n\r\nclass Live extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            error : null,\r\n            dataset: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        try {\r\n            const { resources: items } = await container.items.query(querySpec).fetchAll();\r\n\r\n            let tmp = []\r\n\r\n            items.forEach(item => {\r\n                tmp.push(item);\r\n            });\r\n\r\n            this.setState({dataset: tmp});\r\n\r\n        } catch(error){\r\n            console.log(error.response);\r\n        }\r\n    }\r\n\r\n    getDate(datetime) {\r\n        let date = datetime.substring(0,10);\r\n        return date;\r\n    }\r\n\r\n    getTime(datetime) {\r\n        let time = datetime.substring(11,19);\r\n        return time;\r\n    }\r\n\r\n    render() {\r\n        const {error, dataset} = this.state;\r\n\r\n        if(error){\r\n            return <div>Error</div>\r\n        } else if (typeof(dataset) !== undefined) {\r\n            return(\r\n                    <Table table-responsive striped bordered hover variant=\"light\">\r\n                    <thead class=\"thead-dark\">\r\n                    <tr>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Device ID</th>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Date</th>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Time</th>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Temperature</th>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Humidity</th>\r\n                        <th class=\"border border-dark text-center font-weight-light\">Product Quantity</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {\r\n                        dataset.map(dataset => (\r\n                            <tr>\r\n                                <th class=\"text-center font-weight-light\">{dataset.deviceID}</th>\r\n                                <th class=\"text-center font-weight-light\">{this.getDate(dataset.datetime)}</th>\r\n                                <th class=\"text-center font-weight-light\">{this.getTime(dataset.datetime)} BST</th>\r\n                                <th class=\"text-center font-weight-light\">{dataset.temperature.toFixed(2)}&#x2103;</th>\r\n                                <th class=\"text-center font-weight-light\">{dataset.humidity.toFixed(2)}</th>\r\n                                <th class=\"text-center font-weight-light\">{dataset.productCount}</th>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                    </tbody>\r\n                    </Table>\r\n            );\r\n        }\r\n        else {\r\n            return <div>Loading data...</div>\r\n        }   \r\n    } \r\n}\r\n\r\nexport default Live;\r\n","import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nimport Chart from 'chart.js';\r\nimport { findByLabelText, queryByAltText } from '@testing-library/react';\r\n\r\nconst CosmosClient = require(\"@azure/cosmos\").CosmosClient;\r\nconst config = require(\"./config\");\r\n\r\nconst { endpoint, key, databaseId, containerId } = config;\r\nconst client = new CosmosClient({ endpoint, key });\r\n\r\nconst database = client.database(databaseId);\r\nconst container = database.container(containerId);\r\n\r\nconst queryA = {\r\n    query: 'SELECT c.deviceID, c.datetime, c.productCount FROM c'\r\n}; \r\n\r\nconst queryD = {\r\n    query: 'SELECT c.deviceID, c.datetime, c.humidity FROM c'\r\n}; \r\n\r\nconst queryC = {\r\n    query: 'SELECT c.deviceID, c.datetime, c.temperature FROM c'\r\n}; \r\n\r\nclass Query extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.chartA = React.createRef();\r\n        this.chartB = React.createRef();\r\n        this.chartC = React.createRef();\r\n        this.chartD = React.createRef();\r\n        this.state = {\r\n            error : null\r\n        }\r\n    }\r\n\r\n    getRandomInt() {\r\n        var val = Math.floor(Math.random() * 256);\r\n        return val;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        try {\r\n            const { resources: itemsA } = await container.items\r\n            .query(queryA)\r\n            .fetchAll();\r\n\r\n            const { resources: itemsD } = await container.items\r\n            .query(queryD)\r\n            .fetchAll();\r\n\r\n            const { resources: itemsC } = await container.items\r\n            .query(queryC)\r\n            .fetchAll();\r\n\r\n            let tmpA = []\r\n            let tmpB = []\r\n            let tmpC = []\r\n            let tmpD = []\r\n\r\n            itemsA.forEach(itemA => {\r\n                let date = new Date(itemA.datetime);\r\n                let quantity = itemA.productCount;\r\n                let currentData = {x: date, y: quantity};\r\n                tmpA.push(currentData);\r\n            });\r\n\r\n            let color = \"rgb(\" + this.getRandomInt() + \",\" + this.getRandomInt() + \",\" + this.getRandomInt() + \")\";\r\n            let dataFormattedA = [{\r\n                label: \"All Stock\",\r\n                fill: false,\r\n                backgroundColor: color,\r\n                borderColor: color,\r\n                data: tmpA\r\n            }]\r\n\r\n            itemsA.forEach(itemB => {\r\n                let date = new Date(itemB.datetime);\r\n                let dataTmp = {x: date, y: itemB.productCount}\r\n                if(tmpB.length === 0) {\r\n                    let newArray = []\r\n                    newArray.push(dataTmp)\r\n                    tmpB.push([itemB.deviceID, newArray])\r\n                }\r\n                else {\r\n                    let index = -1\r\n                    for(let i = 0; i < tmpB.length; i++){\r\n                        if(tmpB[i][0] === itemB.deviceID) {\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    if(index !== -1) {\r\n                        tmpB[index][1].push(dataTmp)\r\n                    }\r\n                    else {\r\n                        let newArray = []\r\n                        newArray.push(dataTmp)\r\n                        tmpB.push([itemB.deviceID, newArray])\r\n                    }\r\n                }\r\n            });\r\n\r\n            let dataFormattedB = []\r\n            for(let i=0; i < tmpB.length; i++) {\r\n                let color = \"rgb(\" + this.getRandomInt() + \",\" + this.getRandomInt() + \",\" + this.getRandomInt() + \")\";\r\n                let current = {\r\n                    label: tmpB[i][0],\r\n                    fill: false,\r\n                    backgroundColor: color,\r\n                    borderColor: color,\r\n                    data: tmpB[i][1]\r\n                }\r\n                dataFormattedB.push(current);\r\n            }\r\n\r\n            itemsC.forEach(itemC => {\r\n                let date = new Date(itemC.datetime);\r\n                let dataTmp = {x: date, y: itemC.temperature.toFixed(2)}\r\n                if(tmpC.length === 0) {\r\n                    let newArray = []\r\n                    newArray.push(dataTmp)\r\n                    tmpC.push([itemC.deviceID, newArray])\r\n                }\r\n                else {\r\n                    let index = -1\r\n                    for(let i = 0; i < tmpC.length; i++){\r\n                        if(tmpC[i][0] === itemC.deviceID) {\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    if(index !== -1) {\r\n                        tmpC[index][1].push(dataTmp)\r\n                    }\r\n                    else {\r\n                        let newArray = []\r\n                        newArray.push(dataTmp)\r\n                        tmpC.push([itemC.deviceID, newArray])\r\n                    }\r\n                }\r\n              });\r\n\r\n            let dataFormattedC = []\r\n            for(let i=0; i < tmpC.length; i++) {\r\n                let color = \"rgb(\" + this.getRandomInt() + \",\" + this.getRandomInt() + \",\" + this.getRandomInt() + \")\";\r\n                let current = {\r\n                    label: tmpC[i][0],\r\n                    fill: false,\r\n                    backgroundColor: color,\r\n                    borderColor: color,\r\n                    data: tmpC[i][1]\r\n                }\r\n                dataFormattedC.push(current);\r\n            }\r\n\r\n            itemsD.forEach(itemD => {\r\n                let date = new Date(itemD.datetime);\r\n                let dataTmp = {x: date, y: itemD.humidity.toFixed(2)}\r\n                if(tmpD.length === 0) {\r\n                    let newArray = []\r\n                    newArray.push(dataTmp)\r\n                    tmpD.push([itemD.deviceID, newArray])\r\n                }\r\n                else {\r\n                    let index = -1\r\n                    for(let i = 0; i < tmpD.length; i++){\r\n                        if(tmpD[i][0] === itemD.deviceID) {\r\n                            index = i;\r\n                        }\r\n                    }\r\n                    if(index !== -1) {\r\n                        tmpD[index][1].push(dataTmp)\r\n                    }\r\n                    else {\r\n                        let newArray = []\r\n                        newArray.push(dataTmp)\r\n                        tmpD.push([itemD.deviceID, newArray])\r\n                    }\r\n                }\r\n              });\r\n\r\n            let dataFormattedD = []\r\n            for(let i=0; i < tmpD.length; i++) {\r\n                let color = \"rgb(\" + this.getRandomInt() + \",\" + this.getRandomInt() + \",\" + this.getRandomInt() + \")\";\r\n                let current = {\r\n                    label: tmpD[i][0],\r\n                    fill: false,\r\n                    backgroundColor: color,\r\n                    borderColor: color,\r\n                    data: tmpD[i][1]\r\n                }\r\n                dataFormattedD.push(current);\r\n            }\r\n\r\n            const canvasA = this.chartA.current.getContext(\"2d\");\r\n            const chartA = new Chart(canvasA, {\r\n                type: 'line',\r\n                data: { \r\n                    datasets: dataFormattedA\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: 'time',\r\n                            distribution: 'linear',\r\n                            time: {\r\n                                unit: 'day', \r\n                                stepSize: 1\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Day\"\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Stock Levels (All Stock)\"\r\n                            }\r\n                        }]\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Stock-Time Series Graph',\r\n                        fontColor: 'black'\r\n                    }\r\n                }\r\n            });\r\n\r\n            const canvasB = this.chartB.current.getContext(\"2d\");\r\n            const chartB = new Chart(canvasB, {\r\n                type: 'line',\r\n                data: { \r\n                    datasets: dataFormattedB\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: 'time',\r\n                            distribution: 'linear',\r\n                            time: {\r\n                                unit: 'day', \r\n                                stepSize: 1\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Day\"\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Product Quantity (Individual)\"\r\n                            }\r\n                        }]\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Product-Time Series Graph',\r\n                        fontColor: 'black'\r\n                    }\r\n                }\r\n            });\r\n\r\n            const canvasC = this.chartC.current.getContext(\"2d\");\r\n            const chartC = new Chart(canvasC, {\r\n                type: 'line',\r\n                data: { \r\n                    datasets: dataFormattedC\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: 'time',\r\n                            distribution: 'linear',\r\n                            time: {\r\n                                unit: 'day', \r\n                                stepSize: 1\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Day\"\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Temeprature (C)\"\r\n                            }\r\n                        }]\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Temperature-Time Series Graph',\r\n                        fontColor: 'black'\r\n                    }\r\n                }\r\n            });\r\n\r\n            const canvasD = this.chartD.current.getContext(\"2d\");\r\n            const chartD = new Chart(canvasD, {\r\n                type: 'line',\r\n                data: { \r\n                    datasets: dataFormattedD\r\n                },\r\n                options: {\r\n                    responsive: true,\r\n                    scales: {\r\n                        xAxes: [{\r\n                            type: 'time',\r\n                            distribution: 'linear',\r\n                            time: {\r\n                                unit: 'day', \r\n                                stepSize: 1\r\n                            },\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Day\"\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            scaleLabel: {\r\n                                display: true,\r\n                                labelString: \"Humidity\"\r\n                            }\r\n                        }]\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Humidity-Time Series Graph',\r\n                        fontColor: 'black'\r\n                    }\r\n                }\r\n            });\r\n\r\n        } catch(error){\r\n            this.setState({error: error.response });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{display: 'flex', flexFlow: 'row wrap', justifyContent: 'center', marginBottom: '5vh'}}>\r\n                <div style={{float: 'left', boxShadow: '5px 5px #1D2023', backgroundColor: '#F8F9FA', padding: '5px', border: '5px solid #F8F9FA', borderRadius: '5px', marginTop: '5vh', marginRight: '2.5vw', position: 'relative', maxHeight: '50vh', width: '40vw'}}>\r\n                    <canvas ref={this.chartA}/>\r\n                </div>\r\n                <div style={{float: 'right', boxShadow: '5px 5px #1D2023', backgroundColor: '#F8F9FA', padding: '5px', border: '5px solid #F8F9FA', borderRadius: '5px', marginTop: '5vh', marginLeft: '2.5vw', position: 'relative', maxHeight: '50vh', width: '40vw'}}>\r\n                    <canvas ref={this.chartB}/>\r\n                </div>\r\n\r\n                <br></br>\r\n\r\n                <div style={{float: 'left', boxShadow: '5px 5px #1D2023', backgroundColor: '#F8F9FA', padding: '5px', border: '5px solid #F8F9FA', borderRadius: '5px', marginTop: '5vh', marginRight: '2.5vw', position: 'relative', maxHeight: '50vh', width: '40vw'}}>\r\n                    <canvas ref={this.chartC}/>\r\n                </div>\r\n                <div style={{float: 'right', boxShadow: '5px 5px #1D2023', backgroundColor: '#F8F9FA', padding: '5px', border: '5px solid #F8F9FA', borderRadius: '5px', marginTop: '5vh', marginLeft: '2.5vw', position: 'relative', maxHeight: '50vh', width: '40vw'}}>\r\n                    <canvas ref={this.chartD}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default Query;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Live from \"./Live\";\nimport Query from \"./Query\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\" href=\"/\">Ben Coxford IoT App</a>\n        <div className=\"collapse navbar-collapse\">\n          <div className=\"navbar-nav\">\n            <Link to=\"/\" className=\"nav-item nav-link\">Live</Link>\n            <Link to=\"/search\" className=\"nav-item nav-link\">Analytics</Link>\n          </div>\n        </div>\n        </nav>\n\n        <Route path=\"/\" exact component={Live} />\n        <Route path=\"/search\" component={Query} />\n      </div>\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App/>, rootElement);\n\n\n\nserviceWorker.unregister();"],"sourceRoot":""}